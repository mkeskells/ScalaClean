/*
rules = [ Analysis , Test_internalOutgoingReferences ]

*/
package scalaclean.test.references.internalOutgoingReferences

class Parent {
  def foo: Unit = ()
}
class Child extends Parent{
  def bar(x:Any): Unit = ()
}/* internalOutgoingReferences(<root>/scalaclean/test/references/internalOutgoingReferences/Child#) - <root>/scalaclean/test/references/internalOutgoingReferences/Parent# */
object Special {
  def myVar1 = 1
  def myVar1_=(i: Int) = ()

  def myVar2 = 1
  def myVar2_=(i: Int) = ()

  def apply() = 7
  def unapply(a:Any) = Some(1,2)

  def update(i: Int, j: Int) = ()

}

object XX {
  new Child().foo
  new Child().bar(1)

  Special.myVar1 += 1

  Special.myVar2 = 9
  println(Special.myVar2)

  Special()
  val x: Any = 1
  x match {
    case i: Int => ???
    case Special(a,b) => ???
  }

  Special(1) = 7
}/* internalOutgoingReferences(<root>/scalaclean/test/references/internalOutgoingReferences/XX.) - <root>/scalaclean/test/references/internalOutgoingReferences/Child# :: <root>/scalaclean/test/references/internalOutgoingReferences/Child#/{M}<init>(). :: <root>/scalaclean/test/references/internalOutgoingReferences/Child#/{M}bar(scala.Any). :: <root>/scalaclean/test/references/internalOutgoingReferences/Parent#/{M}foo(). :: <root>/scalaclean/test/references/internalOutgoingReferences/Special. :: <root>/scalaclean/test/references/internalOutgoingReferences/Special/{M}apply(). :: <root>/scalaclean/test/references/internalOutgoingReferences/Special/{M}myVar1(). :: <root>/scalaclean/test/references/internalOutgoingReferences/Special/{M}myVar1_$eq(scala.Int). :: <root>/scalaclean/test/references/internalOutgoingReferences/Special/{M}myVar2(). :: <root>/scalaclean/test/references/internalOutgoingReferences/Special/{M}myVar2_$eq(scala.Int). :: <root>/scalaclean/test/references/internalOutgoingReferences/Special/{M}unapply(scala.Any). :: <root>/scalaclean/test/references/internalOutgoingReferences/Special/{M}update(scala.Int;scala.Int). :: <root>/scalaclean/test/references/internalOutgoingReferences/XX/{M}x(). */
