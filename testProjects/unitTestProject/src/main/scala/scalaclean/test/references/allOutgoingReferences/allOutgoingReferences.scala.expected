/*
rules = [ Analysis , Test_allOutgoingReferences ]

*/
package scalaclean.test.references.allOutgoingReferences

class Parent {
  def foo: Unit = ()/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Parent#foo().) - <root>/scala@ :: <root>/scala@/Unit. */
}/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Parent#) - <root> :: <root>/java@/lang@/Object. :: <root>/scala# :: <root>/scala@ :: <root>/scala@/AnyRef :: <root>/scalaclean@/test@/references@/allOutgoingReferences@ */
class Child extends Parent{
  def bar(x:Any): Unit = ()/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Child#bar().) - <root>/scala@ :: <root>/scala@/Any. :: <root>/scala@/Unit. */
}/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Child#) - <root>/scalaclean@/test@/references@/allOutgoingReferences@ :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Parent. */
object Special {
  def myVar1 = 1/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.myVar1().) - <root>/scala@ :: <root>/scala@/Int. */
  def myVar1_=(i: Int) = ()/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.`myVar1_=`().) - <root>/scala@ :: <root>/scala@/Int. :: <root>/scala@/Unit. */

  def myVar2 = 1/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.myVar2().) - <root>/scala@ :: <root>/scala@/Int. */
  def myVar2_=(i: Int) = ()/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.`myVar2_=`().) - <root>/scala@ :: <root>/scala@/Int. :: <root>/scala@/Unit. */

  def apply() = 7/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.apply().) - <root>/scala@ :: <root>/scala@/Int. */
  def unapply(a:Any) = Some(1,2)/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.unapply().) - <root> :: <root>/scala# :: <root>/scala@ :: <root>/scala@/Any. :: <root>/scala@/Int. :: <root>/scala@/Nothing. :: <root>/scala@/Some# :: <root>/scala@/Some. :: <root>/scala@/Some@ :: <root>/scala@/Some@/{M}apply[<none>](scala.Some.A) :: <root>/scala@/Tuple2# :: <root>/scala@/Tuple2. :: <root>/scala@/Tuple2@ :: <root>/scala@/Tuple2@/{M}apply[<none>;<none>](scala.Tuple2.T1;scala.Tuple2.T2) */

  def update(i: Int, j: Int) = ()/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.update().) - <root>/scala@ :: <root>/scala@/Int. :: <root>/scala@/Unit. */

}/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/Special.) - <root> :: <root>/java@/lang@ :: <root>/java@/lang@/Object. :: <root>/java@/lang@/Object./{M}<init>() :: <root>/scala# :: <root>/scala@ :: <root>/scala@/AnyRef :: <root>/scala@/Unit. :: <root>/scalaclean@/test@/references@/allOutgoingReferences@ :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@ */

object XX {
  new Child().foo
  new Child().bar(1)

  Special.myVar1 += 1

  Special.myVar2 = 9
  println(Special.myVar2)

  Special()
  val x: Any = 1/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/XX.x.) - <root>/scala@ :: <root>/scala@/Any. */
  x match {
    case i: Int => ???
    case Special(a,b) => ???
  }

  Special(1) = 7
}/* allOutgoingReferences(G:scalaclean/test/references/allOutgoingReferences/XX.) - <root> :: <root>/java@/lang@ :: <root>/java@/lang@/Object. :: <root>/java@/lang@/Object./{M}<init>() :: <root>/scala# :: <root>/scala@ :: <root>/scala@/Any. :: <root>/scala@/Any./{M}isInstanceOf[<none>]() :: <root>/scala@/AnyRef :: <root>/scala@/Boolean. :: <root>/scala@/Boolean./{M}unary_$bang() :: <root>/scala@/Int. :: <root>/scala@/Int./{M}$plus(scala.Int) :: <root>/scala@/MatchError. :: <root>/scala@/MatchError./{M}<init>(scala.Any) :: <root>/scala@/Nothing. :: <root>/scala@/Predef# :: <root>/scala@/Predef@ :: <root>/scala@/Predef@/{M}$qmark$qmark$qmark() :: <root>/scala@/Predef@/{M}println(scala.Any) :: <root>/scala@/Some. :: <root>/scala@/Some./{M}isEmpty() :: <root>/scala@/Tuple2. :: <root>/scala@/Unit. :: <root>/scalaclean@/test@/references@/allOutgoingReferences@ :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Child. :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Child./{M}<init>() :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Child./{M}bar(scala.Any) :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Parent./{M}foo() :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special# :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@ :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@/{M}apply() :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@/{M}myVar1() :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@/{M}myVar1_$eq(scala.Int) :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@/{M}myVar2() :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@/{M}myVar2_$eq(scala.Int) :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@/{M}unapply(scala.Any) :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/Special@/{M}update(scala.Int;scala.Int) :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/XX@ :: <root>/scalaclean@/test@/references@/allOutgoingReferences@/XX@/{M}x() */