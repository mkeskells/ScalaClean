package scalaclean.test.extends_

trait GrandParentTrait extends Iterable[String]

trait ParentTrait extends GrandParentTrait with java.util.Iterator[String]

trait ChildTrait extends ParentTrait

trait GChildTrait extends ChildTrait

trait Trait_ChildTrait extends ParentTrait

abstract class Class_ChildTrait extends ParentTrait

object Object_ChildTrait extends ParentTrait {
  override def iterator: Iterator[String] = ???

  override def hasNext: Boolean = ???

  override def next(): String = ???
}

trait Mix1

trait Mix2/* extends(C:scalaclean.test.extends_.Mix2) - C:scalaclean.test.extends_.Marker2 :: O:scalaclean.test.extends_.Marker1 */

trait Mix3

class GrandParentClass extends Iterable[String] {
  self: Mix2 =>
  override def iterator: Iterator[String] = ???
}/* extends(C:scalaclean.test.extends_.GrandParentClass) - C:scalaclean.test.extends_.Marker2 :: O:scalaclean.test.extends_.Marker1 */

abstract class ParentClass extends GrandParentClass with Mix2/* extends(C:scalaclean.test.extends_.ParentClass) - C:scalaclean.test.extends_.Marker2 :: O:scalaclean.test.extends_.Marker1 */

class ChildClass extends ParentClass/* extends(C:scalaclean.test.extends_.ChildClass) - O:scalaclean.test.extends_.Marker1 */
class Marker2 extends ParentClass

object ChildObject extends ChildClass
object Marker1 extends ChildClass