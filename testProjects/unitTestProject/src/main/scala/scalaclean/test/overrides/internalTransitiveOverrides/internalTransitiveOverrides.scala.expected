/*
rules = [ Analysis , Test_internalTransitiveOverrides ]

*/
package scalaclean.test.overrides.internalTransitiveOverrides

trait GrandParentTrait {
  def d1: Int
  def d2(a:Int): Int
  def d2a(a:Int)(b:Int): Int
  def d3()(): Int

}
trait ParentTrait extends GrandParentTrait {
  def d1: Int/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#/{M}d1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d1(). */
  def d2(a: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#/{M}d2(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2(). */
  def d3(): () => Int = ???
}
trait ChildTrait extends ParentTrait {
  def d1: Int = 1/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/ChildTrait#/{M}d1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d1(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d1(). */
  override def d2(a: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/ChildTrait#/{M}d2(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d2(). */
  override def d3(): () => Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/ChildTrait#/{M}d3().) - G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d3(). */
  def d2a(a:Int) = d2 _

}
trait GChildTrait extends ChildTrait {
  override def d1: Int = 1/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/GChildTrait#/{M}d1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/ChildTrait#d1(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d1(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d1(). */
  override def d2(a: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/GChildTrait#/{M}d2(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/ChildTrait#d2(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d2(). */
  override def d3(): () => Int = () => 1/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/GChildTrait#/{M}d3().) - G:scalaclean/test/overrides/internalTransitiveOverrides/ChildTrait#d3(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d3(). */

}
trait Trait_ChildTrait extends ParentTrait {
  override def equals(obj: Any): Boolean = super.equals(obj)

  override def clone(): AnyRef = super.clone()

  override def toString: String = super.toString

  override def finalize(): Unit = super.finalize()

  override def hashCode(): Int = super.hashCode()

  override def d1: Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Trait_ChildTrait#/{M}d1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d1(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d1(). */

  override def d2(a: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Trait_ChildTrait#/{M}d2(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d2(). */

  override def d2a(a: Int)(b: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Trait_ChildTrait#/{M}d2a(scala.Int)(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2a(). */

  override def d3()(): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Trait_ChildTrait#/{M}d3()().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d3(). */
}
class Class_ChildTrait extends ParentTrait {
  override def equals(obj: Any): Boolean = super.equals(obj)

  override def clone(): AnyRef = super.clone()

  override def toString: String = super.toString

  override def finalize(): Unit = super.finalize()

  override def hashCode(): Int = super.hashCode()

  override def d1: Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Class_ChildTrait#/{M}d1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d1(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d1(). */

  override def d2(a: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Class_ChildTrait#/{M}d2(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d2(). */

  override def d2a(a: Int)(b: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Class_ChildTrait#/{M}d2a(scala.Int)(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2a(). */

  override def d3()(): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Class_ChildTrait#/{M}d3()().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d3(). */
}
object Object_ChildTrait extends ParentTrait {
  override def equals(obj: Any): Boolean = super.equals(obj)

  override def clone(): AnyRef = super.clone()

  override def toString: String = super.toString

  override def finalize(): Unit = super.finalize()

  override def hashCode(): Int = super.hashCode()

  override def d1: Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Object_ChildTrait/{M}d1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d1(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d1(). */

  override def d2(a: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Object_ChildTrait/{M}d2(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/ParentTrait#d2(). */

  override def d2a(a: Int)(b: Int): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Object_ChildTrait/{M}d2a(scala.Int)(scala.Int).) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d2a(). */

  override def d3()(): Int = ???/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/Object_ChildTrait/{M}d3()().) - G:scalaclean/test/overrides/internalTransitiveOverrides/GrandParentTrait#d3(). */
}


//class GrandParentClass {
//
//  def foo: Unit = ()
//}
//class ParentClass extends GrandParentClass {
//}
//class ChildClass extends ParentClass{
//  def bar(x:Any): Unit = ()
//}
//
//object ClildObject extends ChildClass {
//  new Child().foo
//  new Child().bar(1)
//}

trait T1 {
  def v1 : AnyRef
}

trait T2 extends T1 {
  def v1 : String/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/T2#/{M}v1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/T1#v1(). */
}
trait T3 extends T1 {
  def v1 : String = ""/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/T3#/{M}v1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/T1#v1(). */
}
trait T4 extends T2 {
  def v1 : String/* internalTransitiveOverrides(<root>/scalaclean/test/overrides/internalTransitiveOverrides/T4#/{M}v1().) - G:scalaclean/test/overrides/internalTransitiveOverrides/T1#v1(). :: G:scalaclean/test/overrides/internalTransitiveOverrides/T2#v1(). */
}

trait VT2 extends T1 {
  val v1 : String
}
trait VT3 extends T1 {
  val v1 : String = ""
}
trait VT4 extends VT2 {
  val v1 : String
}

trait VL2 extends T1 {
  val v1 : String
}
trait VL3 extends VL2 {
  lazy val v1 : String = ""
}

abstract class VLC2 extends T1 {
  val v1 : String
}
class VLC3 extends VLC2 {
  lazy val v1 : String = ""
}
class VLC3a extends VLC3 {
  override lazy val v1 : String = ""
}
